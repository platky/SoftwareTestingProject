<error>
<domain>STATIC_JAVA</domain>
<lang>Java</lang>
<checker>UNINTENDED_INTEGER_DIVISION</checker>
<file>/home/ejmcalis/CallGraph.java</file>
<function>CallGraph.evaluate()</function>
<score>100</score>
<ordered>false</ordered>
<event>
<main>true</main>
<tag>integer_division</tag>
<description>{CovLStrv2{{t{Dividing integer expressions {0} and {1}, and then converting the integer quotient to type {2}. Any remainder, or fractional part of the quotient, is ignored.}{{code{(java.lang.Integer)pairs.getValue() * 100}}}{{code{v1}}}{{code{double}}}}}}</description>
<line>85</line>
</event>
<event>
<remediation>true</remediation>
<tag>remediation</tag>
<description>{CovLStrv2{{t{To compute and use a non-integer quotient, change or cast either operand to type {0}. If integer division is intended, consider indicating that by casting the result to type {1} .}{{code{double}}}{{code{int}}}}}}</description>
<line>85</line>
</event>
<extra>v1</extra>
<subcategory>none</subcategory>
<antecedentMerge>
<domain>STATIC_JAVA</domain>
<checker>FB.ICAST_IDIV_CAST_TO_DOUBLE</checker>
<file>/home/ejmcalis/CallGraph.java</file>
<function>CallGraph.evaluate()</function>
<extra></extra>
</antecedentMerge>
<typePropertiesGroup>
<category>Incorrect expression</category>
<impact>Medium</impact>
<type>Result is not floating-point</type>
<localEffect>The result of the division is truncated to an integer (a whole number), which is usually a loss of precision in a calculation.</localEffect>
<longDescription>When dividing two values of integer types, integer division is used, which ignores any remainder. When such a result is used in a context expecting a floating-point number, it is likely that floating-point division was intended.</longDescription>
<qualityKind>true</qualityKind>
</typePropertiesGroup>
</error>
<error>
<domain>STATIC_JAVA</domain>
<lang>Java</lang>
<checker>UNINTENDED_INTEGER_DIVISION</checker>
<file>/home/ejmcalis/CallGraph.java</file>
<function>CallGraph.evaluate()</function>
<score>100</score>
<ordered>false</ordered>
<event>
<main>true</main>
<tag>integer_division</tag>
<description>{CovLStrv2{{t{Dividing integer expressions {0} and {1}, and then converting the integer quotient to type {2}. Any remainder, or fractional part of the quotient, is ignored.}{{code{(java.lang.Integer)pairs.getValue() * 100}}}{{code{v2}}}{{code{double}}}}}}</description>
<line>92</line>
</event>
<event>
<remediation>true</remediation>
<tag>remediation</tag>
<description>{CovLStrv2{{t{To compute and use a non-integer quotient, change or cast either operand to type {0}. If integer division is intended, consider indicating that by casting the result to type {1} .}{{code{double}}}{{code{int}}}}}}</description>
<line>92</line>
</event>
<extra>v2</extra>
<subcategory>none</subcategory>
<antecedentMerge>
<domain>STATIC_JAVA</domain>
<checker>FB.ICAST_IDIV_CAST_TO_DOUBLE</checker>
<file>/home/ejmcalis/CallGraph.java</file>
<function>CallGraph.evaluate()</function>
<extra></extra>
</antecedentMerge>
<typePropertiesGroup>
<category>Incorrect expression</category>
<impact>Medium</impact>
<type>Result is not floating-point</type>
<localEffect>The result of the division is truncated to an integer (a whole number), which is usually a loss of precision in a calculation.</localEffect>
<longDescription>When dividing two values of integer types, integer division is used, which ignores any remainder. When such a result is used in a context expecting a floating-point number, it is likely that floating-point division was intended.</longDescription>
<qualityKind>true</qualityKind>
</typePropertiesGroup>
</error>
